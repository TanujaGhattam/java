java was introduced int he 
- In the year 2012 java product was under taken by "Oracle INC" .
- Java contains multiple product layers or edditions of java 
1.java SE(Standard Edition)----->to write programes
2.J2EE (Enterprise Edition)
3.J2ME( Micro Edition)



JRE is used for end-users.
JDK is download for "Developers". (Version 21,11,17,8  are stable and long term software)

IDE's for java
-----------------

--> Integrated Development Editor/Environment.
-->Notepad++, subline, visual studio code, Eclipse, Intellij, STS (Spring Tool Suit) , NetBeans ---> These platforms are used to write java programs.

CHARACTERS OF JAVA
________________________

1.OBJECT ORIENTED
-------------------------------
-->Java is a high level language. Developed based on Object Oriented Programming structrures (OOPS).
-->OOPS is going to overcome the drawbacks of POPS.(Procedural Oriented Programming Structure) like Code reusability, code Security and DataBase Connectivity(DB)
-->OOPS is a theory that contains ideal concepts the languages which are implementing them can produce the softwares which are error free, reusable and robust.

2.CASE SENSITIVE:
					---------------------
--> Java code syntax are Camel Case Sencitive for maintaining difference from regular text and reserved keywords.
3.REUSABLE:
-------------------

-->Java is implementing the code as packages and modules for maintaining reuseability.

4.PLATINDEPENDENT:
------------------------------

--> Java is familiar in the market with a statement of write ones and run anywhere.
--> For Platform independency java using platform dependent JRE's.

TYPES OF APPLICATIONS IN JAVA
_________________________________________

--> By using java we can implement 3 types of applications
   1.DESKTOP APPLICATIONS
   2.WEB APPLICATION
   3.MOBILE APPLICATIONS

1.Desktop Application:
----------------------------

--> These are two types 
    A)Console User Interface (CUI)
    B)Graphical User Interface (GUI)

A) CUI
----------

--> For CUI applications cmd prompt will act as an interface btw end-user and compiler.
--> CUI applications is also called as "text processing applications". because cmd prompt will take input and print output in a formate of strings.
EG: Network based apps like Telnet

B) GUI APPS:
------------------

--> The i/p and o/p of the applications will be supporting both key board and mouse.
--> These will get installed in the OS and runs along with OS only.
EG: VLC player, Notepad, Google Chrome etc.

2.WEB APPLICATIONS:
-------------------------------

--> These are going to be deployed in the server and runs in every server machine with the help of web browser like internet explorer, net scape, firefox etc
EG: IRCTC, SBI, Twitter, Facebook.
--> We use the version of java called J2EE

3.MOBILE APPLICATIONS:
-----------------------------------

--> By using J2ME we create java mobile applications. Unfortunately, from the year 2012 java dropped support for mobile app development 
--> JAVA, KOTLIN will be used for android app development.

VARIABLE:
___________

--> Variable is a system allocated memory from heap.(Its a portion of RAM memory).
--> Var. will work like a Glass which can store data.

CONSTANT:
____________

--> Constants are also variables will fixed values. 
--> Java is not going to support constants with help of "FINAL" keyword. 

DATA TYPES:
_____________

--> Data type of Var will define the category of i/p and it will decide how much size to be allocated for variables. 

Primitive data types / Primitive keywords: int, byte, short, long, float, double, Boolean
Non-Primitive data types: array, class, interfaces, string, Enum
Wrapper Classes: Boolean, Character, Integer, Float. (especially used in typecasting)

CREATING VARIABLES:
______________________

by

OPERATORS:
_____________

--> Operator is a spl symbol which works for pre-defined functionality. 
1. Arithematic Operator [+, -, *, /, %] % gives the reminder of the string or integer
2. Relational Operator [>, <, >=, <=, ==, !=]  
3. Assignment Operator [ =, += , -=, *=, /=, %= ]																																							
4. Logical Operator [ &&, ||, ! ]
5. Increment/Decrement [ ++, -- ]
6. Terinary Operator [? : ]

STATEMENTS:
______________

--> In java there are 3 statements are available.
1. Conditional Statements/ Decision-->Making (if, else, nested-if)
2. Looping stt/ Iterational stt--> (for, while, do-while)
3. Case--> (switch, case)

1. Conditional Statements:
----------------------------------
 
finding the biggest value among 3 variables


OBJECT ORIENTED PROGRAMMING:
___________________________________

--> It is a theory that contains some list of topics which are ideal for creating re-usable error free softwares.
1.CLASS and OBJECT
2.INHERITANCE
3.POLYMORPHISM
4.ENCAPSULATION
5.ABSTRACTION
6.CONSTRUCTION
7.EXCEPTION HANDLING

1.CLASS
_________

--> Class can be defined as collection of data members (variables) and member functions (methods).
--> Class can be also defined as collection of objects.
--> Class is a blue print of implementation
SYNTAX FOR CREATONG CLASS:
Class class_name {
  variables;
  functions;
}

EG: Class Product{
      int id;
      String name;
      double price;
  }

OBJECT
________

--> Object is a implementation of class and also defined as instance of a class. 
SYNTAX FOR CREATING OBJECTS:
new class-name().id=1;
new class-name().name="BMW";
 it is used in older days by using these each value is stored in different objects. it is some difficult to handle and errors may occure.
 object is a collection of data types.
--> to overcome this drawback we use the following syntax

class-name or var or object  obj=new class-name();
obj.id=1;
obj.name="BMW";

EXAMPLE:
---------------

Class product{
   int id;
   String name;
   double price;
 Class Print(){
S.o.p(p.id+"\n" + p.name+"\n"+ p.price);
}

public Class ClassObject{
Product p=new Product();
   p.id=12;
   p.name="tanuja";
   p.price=35000;
S.o.p(p.id);	 #12
S.o.p(p.name);  #tanuja
S.o.p(p.price);  #35000
p.print();
}
}

2.INHERITANCE
_______________

--> Inheritance is designed for code re-useability.
--> It is a process of acquiring properties form one class to another class.
--> There are 5 types of inheritance is available.

A) Single inheritance
---------------------------
--> A single class is being inherited by only a single class, then we called it as single inheritance

B) Multi-level inheritance
C) Heriarchal inheritance
D) Hybrid inheritance

STATIC POLYMORPHISM
______________________
--> It is a process of implementing functions with same name with same name and same method name but different parameters.
--> Static polymorphism will be available in only functions but not on variables.
--> Static polymorphism will be implemented only inside the class.The approach of implementing multiple functions with different parameters can be
called as "MethodOverloading".

DYNAMIC POLYMORPHISM
__________________________
--> It is an approach of replacing the functionality from an inherited class.
--> It will be available in 2 classes connected with inheritance logic.
--> In this approach will have same function, same return type and same parameters also.
--> It is also known as "MethodOverriding".
--> In this we use "extends" keyword.

ENCAPSULATION
_________________
--> It is the process of showing or hiding the members of the class using an Access specifier.
--> Acess Specifier is a keyword that is used to mention the accessibility level of the properties (variables or methods) of the class.
--> In java we have following Access specifiers:
1.Public
2.Private
3.Protected
4.default

ABSTRACTION
______________
-->It is a process of hiding implementation and showing the input and output
--> Abstraction can be achieved in 2 ways 
1. Abstract Classes
2. Interfacesin 

1.Abstract Classes:
-------------------------
--> Abstract classes can be implemented by 
--> it can be used by using 
--> It will contain both abstract and non-abstract methods.
--> Abstract class would contain atleast one abstract method.
--> In abstraction it combines both complete and incomplete classes means abstract class.
--> Scince astract classes are incomplete we can't create objects.
--> If any class is extending an abstract class then it is liable form implementing all abstract methods of parent class.
EG:if two abnks

2.INTERFACES
----------------------
--> It will be used to 100% abstraction.
--> Interfaces will contain only abstract methods.
--> Since every method is abstract type we no need to specifiey abstract keywords in definition of methods.
--> The class which is implementing interface should implement all methods of the interface without fail.
--> In interfaces only incomplete classes are present.
--> Interface will be used to create project with loosely coupled architecture. when we have any changes in code then it is easily to recover in interface compared to abstract.
--> Same name with different funcationality.
EG:if there is shape name called method then other organization has also have same name but with different functionality like to find radius for circle,square.

CONSTRUCTOR
______________
--> It is a spl type member function where the name the name of the constructor will be exactly similar to the class type.
--> It won't have any return type.
--> The constructor will have the access specifier of public only.
--> Constructors will be exection automatically when we create object of the class.
--> Constructors also can be overloaded.
--> There will be two types of constructors
1.Empty constructors.
2.Parameterised Constructor.
--> If any class is inherited , at the time of execution of constructor it will invoke parent class constructs automatically.

OVERRIDING METHODS IN JAVA CLASSES
_________________________________________
--> Since every class of java extends object class by default , the object class contain some predefined functions like 
	1.toString()
	2.equals()
	3.hashCode()

--> hashCode() is a system generated index value for mapping address of the object.
--> hashCode() will be used to return the index value mapped with address.

PRE-DEFINED FUNCTION FROM MAP CLASS
_________________________________________

PRE-DEFINED DATA FUNCTIONS
________________________________
--> Before version 8 in java Data from util package.
--> Data class will give the values of both date and time intervals.

LOCAL DATA
_____________
--> This class was introduced from version 8 of java as a pre-view build for dealing with date properties from computer date and time settings.
--> Similarly LocalTime will deal the properties of time and LocalDateTime will work for date and time properties.

LOCAL DATE TIME
__________________

CALCULATING TIMESPAN BETWEEN TWO DATE OBJECTS
_______________________________________________

STRING HANDLING
_________________
--> String is a class which is immutable.
EG:string str="india".
     s.o.p(str)#india
     s.o.p(str +"is country")  #india is country
     s.o.p(str)     #india  (it doesn't change when we add any new thing and then we again print the same string it would not be updated it come same as string.
--> String can be also defined as character array. The variable value we assigned to the string can not be modified partially.

BOXING AND UNBOXING
_______________________
--> Converting any primitive data type values into object type can be called as "boxing".

UNBOXING
----------------
--> Converting from original primitive type to 

REGULAR EXPRESSION
_____________________________
--> It is a mathematical notation based on patter it will validate strings.
--> Every R.E starts with "^" and ends with "$".

VALIDATING USER ID WITH MIN 3 CHARACTER AND MAX 10 CHARACTERS AND FIRST DIGIT SHOULD BE ALPHABET
_________________________________________________________________________________________________________

	
FILE HANDLING
_______________
--> In java work with files we use the package "java.io" by using this package we can able to read, write, append, create and delete files and directories.

CREATING A FILE WITH JAVA
----------------------------------------
import java.io.*;
public class FileException {

	public static void main(String[] args) throws IOException {
		// TODO Auto-generated method stub
		String fpath="E:/Demo.txt";
		File f1=new File(fpath);
		if(f1.createNewFile())
		{
			System.out.println("file cfeated successfully");
		}
		else {
			System.out.println("unable");
		}
	}

}


CREATING DIRECTORIES OR FOLDERS
_______________________________________
 import java.io.File;
import java.io.IOException;
public class FileHandlingFolderCreation{

	public static void main(String[] args) throws IOException {
		// TODO Auto-generated method stub
		String fpath="E:/Demo/demofolder1/demofolder2.txt";
		File f1=new File(fpath);
		if(f1.mkdirs())
		{
			System.out.println("folders created successfully");
		}
		else {
			System.out.println("unable to create sucessful");
		}
	}

}


CHECKING THE FILE PATH OR FOLDER PARH DIRECTORY
______________________________________________________
import java.io.File;

public class FileHandling3 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		String dirpath="E:/Demo/demofolder1/demofolder2.txt";
		
		File f=new File(dirpath);
		if(f.isDirectory()) {
			System.out.println("it is directory path");
		}
		if(f.isFile()) {
			System.out.println("it is file path");
		}
	}

}

WITING TEXT TO AN EXISTING FILE
_________________________________


READING TEXT CONTENT OR LINES FROM TEXT FILE
____________________________________________________

1.Buffer Reader

WOKING WITH FILE PROPERTIES
_________________________________

printing file path
getting file size

EXCEPTION HANDLING
______________________
--> Exception is a run time error which is caused due to i/o availability.
--> To handle exception we can use exception handling methods
	1.try
	2.catch
	3.finally
	4.throws
--> Only one "try block" is used but we use "multiple catch" blocks.
--> "finally" and "throws" blocks are optional blocks.
--> In "try" block we write the code what error is occur.
--> In "catch" block we find the error and it finally get executed.

INDEXOUTOFBOUNT EXCEPTION HANDLING
_________________________________________
--> This type of exception will be trigged when program is receving wrong index.

ARTHEMATIC EXCEPTION
___________________________
--> Whenever we are dividing any value with zero then it will trigger arthimetic exception.

CUSTOM EXCEPTION CLASSES
______________________________

-->  To create any custome exception we have to inherit the "pre-defined exception class".

COLLECTIONS
____________________

--> It s a frame work which is available from version 2 of java to overcome the drawbacks.
--> These are used to drawback the overcome the drawbacks of arrays like arrayswill only store the similar data type elements.
--> Arrays aways prefer for continuous memory location and they require fixed array size.
Collects categorized into 
1.list
2.set
3.map
4.tables or ditionaries























